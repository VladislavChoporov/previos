import asyncio
import logging
from datetime import datetime, timedelta

from market_data import get_candles
from strategy import enhanced_strategy
from orders import open_position, close_position
from instruments import get_market_instruments
from user_state import user_states

async def trading_loop(message):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª.
    """
    user_id = message.from_user.id
    user_state = user_states.get(user_id)

    if not user_state:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ user_states.")
        return

    if not hasattr(user_state, "logger"):
        user_state.logger = logging.getLogger(f"UserState_{user_id}")
        user_state.logger.setLevel(logging.INFO)

    user_state.logger.info("üîÑ –¶–∏–∫–ª —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞—á–∞–ª—Å—è")

    while user_state.active:
        try:
            instruments = await get_market_instruments(user_state)
            if not instruments:
                user_state.logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏.")
                await asyncio.sleep(60)
                continue

            for instrument in instruments:
                figi = instrument["figi"]
                ticker = instrument["ticker"]
                lot = instrument["lot"]

                user_state.logger.info(f"üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–∞: {ticker} ({figi})")

                from_date = datetime.utcnow() - timedelta(days=30)
                to_date = datetime.utcnow()
                interval = "1hour"

                candles = await get_candles(user_state.client, figi, from_date, to_date, interval)

                if not isinstance(candles, list) or not candles or len(candles) < 10:
                    user_state.logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ {ticker}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    continue

                signal = enhanced_strategy(candles)
                last_price = candles[-1]["close"]

                if user_state.position and user_state.entry_price:
                    change = (last_price - user_state.entry_price) / user_state.entry_price
                    user_state.logger.info(f"üìà –¢–µ–∫—É—â–∞—è –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫: {change:.2%}")

                    if change >= 0.05:
                        await close_position(user_state.client, user_state, figi, "PROFIT")
                        user_state.logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –ø–æ {ticker} –∑–∞–∫—Ä—ã—Ç–∞ —Å –ø—Ä–∏–±—ã–ª—å—é.")
                        continue
                    elif change <= -0.02:
                        await close_position(user_state.client, user_state, figi, "LOSS")
                        user_state.logger.info(f"‚ùå –ü–æ–∑–∏—Ü–∏—è –ø–æ {ticker} –∑–∞–∫—Ä—ã—Ç–∞ —Å —É–±—ã—Ç–∫–æ–º.")
                        continue

                if signal == "buy" and not user_state.position:
                    await open_position(user_state.client, user_state, figi, lot, "BUY")
                    user_state.logger.info(f"üì• –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è 'buy' –ø–æ {ticker}.")

                elif signal == "sell" and not user_state.position:
                    await open_position(user_state.client, user_state, figi, lot, "SELL")
                    user_state.logger.info(f"üì• –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è 'sell' –ø–æ {ticker}.")

            await asyncio.sleep(60)

        except Exception as e:
            user_state.logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}")
            await asyncio.sleep(60)

__all__ = ["trading_loop"]
