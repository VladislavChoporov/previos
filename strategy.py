import numpy as np
from ml_model import load_model, predict_signal
import pandas as pd
import logging
from config import CONFIG
from tinkoff.invest.utils import now
from datetime import timedelta
from utils import calculate_rsi, calculate_macd
from loguru import logger

logger = logging.getLogger("strategy")
model = load_model()

def calculate_rsi(prices: np.ndarray, period: int) -> float:
    if len(prices) < period + 1:
        return 50.0
    deltas = np.diff(prices)
    gains = np.where(deltas > 0, deltas, 0)
    losses = np.where(deltas < 0, -deltas, 0)
    avg_gain = np.mean(gains[-period:])
    avg_loss = np.mean(losses[-period:])
    if avg_loss == 0:
        return 100.0
    rs = avg_gain / avg_loss
    return 100.0 - (100.0 / (1 + rs))

def calculate_macd(prices: np.ndarray, fast_period: int, slow_period: int, signal_period: int):
    if len(prices) < slow_period:
        return 0.0, 0.0, 0.0
    ema_fast = pd.Series(prices).ewm(span=fast_period, adjust=False).mean()
    ema_slow = pd.Series(prices).ewm(span=slow_period, adjust=False).mean()
    macd_line = ema_fast - ema_slow
    signal_line = macd_line.ewm(span=signal_period, adjust=False).mean()
    histogram = macd_line - signal_line
    return macd_line.iloc[-1], signal_line.iloc[-1], histogram.iloc[-1]

def filter_candles(candles: list) -> tuple:
    # ‚õ≥ –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤–æ–æ–±—â–µ
    return candles, [c.volume for c in candles]


def filter_candles_dynamic(candles: list) -> tuple:
    # ‚õ≥ –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å—ë
    return filter_candles(candles)


def enhanced_strategy(candles):
    if len(candles) < 30:
        logger.debug("‚ùå –ú–∞–ª–æ —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (<30)")
        return None

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ü–µ–Ω—ã –≤ –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª
    close_prices = np.array([c['close'] for c in candles])

    # RSI
    rsi = calculate_rsi(close_prices, 14)
    rsi_signal = None
    if rsi < 30:
        rsi_signal = 'buy'
    elif rsi > 70:
        rsi_signal = 'sell'
    logger.debug(f"üìä RSI: {rsi:.2f} ‚Üí {rsi_signal}")

    # MACD
    macd_line, signal_line, _ = calculate_macd(
        close_prices,
        CONFIG["macd_fast"],
        CONFIG["macd_slow"],
        CONFIG["macd_signal"]
    )
    macd_signal = None
    if macd_line > signal_line:
        macd_signal = 'buy'
    elif macd_line < signal_line:
        macd_signal = 'sell'
    logger.debug(f"üìä MACD: {macd_line:.2f}/{signal_line:.2f} ‚Üí {macd_signal}")

    # –ì–∏–±–∫–∏–π –≤—Ö–æ–¥: –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–∞—ë—Ç —Å–∏–≥–Ω–∞–ª ‚Äî –≤—Ö–æ–¥–∏–º
    signals = [rsi_signal, macd_signal]
    if 'buy' in signals:
        return 'buy'
    elif 'sell' in signals:
        return 'sell'
    else:
        logger.debug("‚ùå –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        return None



# –ù–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:

def get_market_condition(client, figi: str, raw_candles: list) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞:
    - "TREND" –µ—Å–ª–∏ –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è —è–≤–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ,
    - "FLAT" –µ—Å–ª–∏ —Ä—ã–Ω–æ–∫ –≤ –±–æ–∫–æ–≤–∏–∫–µ,
    - "VOLATILITY" –µ—Å–ª–∏ –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å.
    """
    if not raw_candles or len(raw_candles) < 20:
        return "FLAT"
    filtered, _ = filter_candles_dynamic(raw_candles)
    prices = np.array([candle.close.units + candle.close.nano / 1e9 for candle in filtered])
    volatility = np.std(prices) / np.mean(prices)
    macd_line, _, _ = calculate_macd(prices, CONFIG["macd_fast"], CONFIG["macd_slow"], CONFIG["macd_signal"])
    if volatility > 0.02:
        return "VOLATILITY"
    if abs(macd_line) > 0.05:
        return "TREND"
    return "FLAT"

def detect_trend_reversal(client, figi: str, raw_candles: list) -> bool:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö, MACD –∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞–∫–∞–Ω–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç —Ç—Ä–µ–Ω–¥–∞.
    """
    if not raw_candles or len(raw_candles) < 30:
        return False
    filtered, _ = filter_candles_dynamic(raw_candles)
    prices = np.array([candle.close.units + candle.close.nano / 1e9 for candle in filtered])
    macd_line, signal_line, _ = calculate_macd(prices, CONFIG["macd_fast"], CONFIG["macd_slow"], CONFIG["macd_signal"])
    # –ï—Å–ª–∏ MACD –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é —Å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã ‚Äì —Å–∏–≥–Ω–∞–ª —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞
    if macd_line * signal_line < 0:
        logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç —Ç—Ä–µ–Ω–¥–∞ –ø–æ MACD.")
        return True
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞–∫–∞–Ω–∞ (orderbook) ‚Äì –∑–¥–µ—Å—å –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É
    return False

def detect_short_opportunity(client, figi: str, raw_candles: list) -> bool:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ—Ä–æ—Ç–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏ (short).
    –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç –æ —Å–Ω–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Ä–∞–∑–≤–æ—Ä–æ—Ç.
    """
    if detect_trend_reversal(client, figi, raw_candles):
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ—Ä–æ—Ç–∫–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        return True
    return False

def optimal_take_profit(prices: np.ndarray, market_condition: str) -> float:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π.
    –î–ª—è —Ç—Ä–µ–Ω–¥–∞ ‚Äì –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –¥–ª—è —Ñ–ª–µ—Ç–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤ ‚Äì –±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–µ.
    """
    current_price = prices[-1]
    if market_condition == "TREND":
        return current_price * 1.015  # +1.5%
    elif market_condition == "VOLATILITY":
        return current_price * 1.01   # +1%
    else:
        return current_price * 1.005  # +0.5%

# –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ get_market_condition –∏ optimal_take_profit
# –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è get_atr –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ –º–æ–¥—É–ª—è market_data.
