import logging
from typing import Optional

from tinkoff.invest import OrderDirection, OrderType

from market_data import get_last_price
from risk_management import dynamic_sl_tp

logger = logging.getLogger("orders")
logger.setLevel(logging.INFO)


async def open_position(
    client,
    user_state,
    figi: str,
    qty: int,
    signal: str,
    instrument_type: str = "share",
):
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç long (BUY) –∏–ª–∏ short (SELL) –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç `signal`.
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ ‚Äî¬†–≤ calling‚Äëcode (risk_management).
    """
    if qty <= 0:
        logger.warning("‚ö†Ô∏è qty == 0 ‚Üí –æ—Ä–¥–µ—Ä –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º.")
        return

    direction = (
        OrderDirection.ORDER_DIRECTION_BUY if signal == "buy" else OrderDirection.ORDER_DIRECTION_SELL
    )

    order = await client.orders.post_order(
        figi=figi,
        quantity=qty,
        direction=direction,
        order_type=OrderType.ORDER_TYPE_MARKET,
        account_id=user_state.account_id,
    )
    logger.info(f"‚úÖ –û—Ç–∫—Ä—ã—Ç –æ—Ä–¥–µ—Ä {signal.upper()} {figi} √ó{qty}, id={order.order_id}")

    # --- –æ–±–Ω–æ–≤–ª—è–µ–º user_state ---
    last_price = await get_last_price(client, figi)
    entry_prices = getattr(user_state, "entry_prices", {})
    entry_prices[figi] = last_price
    user_state.entry_prices = entry_prices

    positions = getattr(user_state, "positions", {})
    positions[figi] = positions.get(figi, 0) + (qty if signal == "buy" else -qty)
    user_state.positions = positions

    # --- –≤—ã—á–∏—Å–ª—è–µ–º SL/TP ---
    sl, tp = await dynamic_sl_tp(client, figi, last_price, "long" if signal == "buy" else "short")
    logger.info(f"üéØ SL={sl:.2f}, TP={tp:.2f} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è {figi}")

    # TODO: –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å—Ç–æ–ø‚Äë–æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ sandboxStopOrders (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ).


async def close_position(
    client,
    user_state,
    figi: str,
    reason: str = "",
    qty_override: Optional[int] = None,
):
    """
    –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é —Ü–µ–ª–∏–∫–æ–º (–∏–ª–∏ qty_override) –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–º –æ—Ä–¥–µ—Ä–æ–º.
    """
    qty_current = user_state.positions.get(figi, 0)
    if qty_current == 0:
        logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –ø–æ {figi} –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è.")
        return

    qty = abs(qty_current) if qty_override is None else qty_override
    direction = (
        OrderDirection.ORDER_DIRECTION_SELL if qty_current > 0 else OrderDirection.ORDER_DIRECTION_BUY
    )

    await client.orders.post_order(
        figi=figi,
        quantity=qty,
        direction=direction,
        order_type=OrderType.ORDER_TYPE_MARKET,
        account_id=user_state.account_id,
    )
    logger.info(f"üö™ –ü–æ–∑–∏—Ü–∏—è –ø–æ {figi} √ó{qty} –∑–∞–∫—Ä—ã—Ç–∞ ({reason})")

    # —á–∏—Å—Ç–∏–º —Å—Ç–µ–π—Ç
    user_state.positions.pop(figi, None)
    user_state.entry_prices.pop(figi, None)