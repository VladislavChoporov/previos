import logging
from typing import Dict, List, Tuple

from market_data import get_last_price
from orders import close_position

logger = logging.getLogger("portfolio_manager")
logger.setLevel(logging.INFO)


async def get_portfolio_value(client, positions: Dict[str, int]) -> float:
    value = 0.0
    for figi, qty in positions.items():
        last = await get_last_price(client, figi)
        value += last * qty
    return value


async def rebalance_portfolio(user_state, cash_needed: float) -> float:
    """
    –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç cash_needed —Ä—É–±–ª–µ–π, –∑–∞–∫—Ä—ã–≤–∞—è –ø–æ–∑–∏—Ü–∏–∏ —Å —Ö—É–¥—à–∏–º P/L.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–æ –æ—Å–≤–æ–±–æ–¥–∏–ª–∏.
    """
    if not getattr(user_state, "positions", None):
        return 0.0

    pnl_list: List[Tuple[str, float]] = []  # [(figi, pnl), ‚Ä¶]
    for figi, qty in user_state.positions.items():
        last = await get_last_price(user_state.client, figi)
        pnl = (last - user_state.entry_prices[figi]) * qty
        pnl_list.append((figi, pnl))

    # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–±—ã–ª–∏ (–≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–µ–π), —Ç.–µ. —Å–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º —É–±—ã—Ç–æ—á–Ω—ã–µ
    pnl_list.sort(key=lambda x: x[1])

    freed = 0.0
    for figi, _ in pnl_list:
        if freed >= cash_needed:
            break
        logger.info(f"‚öñÔ∏è  Rebalance: –∑–∞–∫—Ä—ã–≤–∞–µ–º {figi} –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –∫—ç—à–∞")
        qty_current = user_state.positions.get(figi, 0)       # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –î–û –∑–∞–∫—Ä—ã—Ç–∏—è
        await close_position(
            user_state.client, user_state, figi,
            reason="REBALANCE", qty_override=abs(qty_current)
        )
        last = await get_last_price(user_state.client, figi)
        freed += last * abs(qty_current)
        user_state.positions.pop(figi, None)                  # —É–¥–∞–ª—è–µ–º –æ–¥–∏–Ω —Ä–∞–∑
        user_state.entry_prices.pop(figi, None)

    logger.info(f"üí∏ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {freed:,.2f}¬†‚ÇΩ –¥–µ–Ω–µ–≥")
    return freed