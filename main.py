import sys
import os
import asyncio
import logging
import signal
import csv
from datetime import datetime, timedelta, timezone
from market_data import save_or_update_candles
from tinkoff.invest import AsyncClient
from tinkoff.invest.schemas import OrderDirection, OrderType
from market_data import get_candles
from strategy import enhanced_strategy
from risk_management import calculate_position_size
from config import CONFIG
from types import SimpleNamespace
from aiogram.utils import executor
from aiogram.dispatcher import Dispatcher
from aiogram import executor
from user_state import UserState
from trade_loop import trading_loop
from user_state import set_user_state, get_user_state

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram
from aiogram import Bot, Dispatcher, types, exceptions
from aiogram.dispatcher.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from bot_ui import get_main_keyboard

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —Ç–æ–∫–µ–Ω–æ–≤
from config import TELEGRAM_TOKEN, TINKOFF_TOKEN, ACCOUNT_ID, CONFIG

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ —Ä—ã–Ω–∫–∞
from market_data import (
    get_last_price, get_orderbook, get_atr,
    get_balance as original_get_balance, get_market_makers, find_high_potential_assets
)

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
from strategy import (
    enhanced_strategy, filter_candles_dynamic, get_market_condition,
    detect_trend_reversal, detect_short_opportunity, optimal_take_profit
)

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ (–±–µ–∑ close_position)
from risk_management import (
    calculate_position_size, update_trailing_stop, check_risk_management, set_dynamic_stop_loss
)

# –ò–º–ø–æ—Ä—Ç –∏–∑ API –¢–∏–Ω—å–∫–æ—Ñ—Ñ
from tinkoff.invest import (
    AsyncClient, InstrumentStatus, InstrumentIdType, OrderDirection,
    OrderType, MoneyValue, CandleInterval
)
from tinkoff.invest.utils import now

from tinkoff.invest.schemas import InstrumentIdType, OrderDirection, OrderType

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞, –ø–æ—Ä—Ç—Ñ–µ–ª—è, –∫–æ–º–∏—Å—Å–∏–π, backtesting –∏ ML
from ai_monitor import monitor_logs_and_collect_news
from portfolio_manager import save_portfolio, load_portfolio, generate_report, rebalance_portfolio
from commission_manager import apply_commission
import backtesting
from ml_model import analyze_trading_history



# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger("main")
logger.setLevel(logging.INFO)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
console_handler = logging.StreamHandler()
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)
file_handler = logging.FileHandler("trades.log", encoding="utf-8")
file_handler.setLevel(logging.INFO)
file_handler.setFormatter(formatter)
logger.addHandler(file_handler)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ Telegram –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
USER_STATE = None
AUTO_TRADE_TASK = None

# –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∏–∑ API.
# –ï—Å–ª–∏ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫, –ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç ‚Äì –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç—ã "units" –∏ "nano", —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö, –∏–Ω–∞—á–µ –ø—Ä–∏–≤–æ–¥–∏–º –∫ float.
async def get_balance(client) -> float:
    try:
        raw_balance = await original_get_balance(client)
        if isinstance(raw_balance, list):
            balance = 0.0
            for m in raw_balance:
                if hasattr(m, "units") and hasattr(m, "nano"):
                    balance += m.units + m.nano / 1e9
                else:
                    balance += float(m)
        else:
            balance = raw_balance
        return balance
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ –æ–±—ë—Ä—Ç–∫—É: {e}")
        return 0.0

MOEXBMI_TICKERS = [
    "ABIO", "ABRD", "AFKS", "AFLT", "AKRN", "ALRS", "APTK", "AQUA", "ASTR", "BANE", "BANEP",
    "BELU", "BLNG", "BSPB", "CARM", "CBOM", "CHMF", "CHMK", "CNRU", "CNTL", "CNTLP", "DATA",
    "DELI", "DIAS", "DVEC", "ELFV", "ELMT", "ENPG", "ETLN", "EUTR", "FEES", "FESH", "FIXP",
    "FLOT", "GAZP", "GCHE", "GECO", "GEMC", "GTRK", "HEAD", "HNFG", "HYDR", "IRAO", "IRKT",
    "IVAT", "JETL", "KAZT", "KAZTP", "KLSB", "KLVZ", "KMAZ", "KRKNP", "KROT", "KZOS", "KZOSP",
    "LEAS", "LIFE", "LKOH", "LNZL", "LNZLP", "LSNG", "LSNGP", "LSRG", "MAGN", "MBNK", "MDMG",
    "MGKL", "MGNT", "MGTSP", "MOEX", "MRKC", "MRKP", "MRKS", "MRKU", "MRKV", "MRKZ", "MSNG",
    "MSRS", "MSTT", "MTLR", "MTLRP", "MTSS", "MVID", "NKHP", "NKNC", "NKNCP", "NLMK", "NMTP",
    "NSVZ", "NVTK", "OGKB", "OKEY", "OZON", "OZPH", "PHOR", "PIKK", "PLZL", "PMSB", "PMSBP",
    "POSI", "PRFN", "PRMD", "QIWI", "RAGR", "RASP", "RBCM", "RENI", "RKKE", "RNFT", "ROLO",
    "ROSN", "RTKM", "RTKMP", "RUAL", "SBER", "SBERP", "SFIN", "SGZH", "SIBN", "SMLT", "SNGS",
    "SNGSP", "SOFL", "SPBE", "SVAV", "SVCB", "T", "TATN", "TATNP", "TGKA", "TGKB", "TGKN",
    "TRMK", "TRNFP", "TTLK", "UGLD", "UNAC", "UNKL", "UPRO", "UWSN", "VEON-RX", "VKCO", "VRSB",
    "VSEH", "VSMO", "VTBR", "WUSH", "X5", "YAKG", "YDEX", "ZAYM"
]

async def get_market_instruments(user_state):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ (–¢–û–õ–¨–ö–û MOEXBMI).
    """
    try:
        logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        async with AsyncClient(TINKOFF_TOKEN) as client:
            response = await client.instruments.shares()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(response.instruments)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.")
            filtered_instruments = [
                {"figi": i.figi, "ticker": i.ticker, "lot": i.lot}
                for i in response.instruments
                if i.ticker in MOEXBMI_TICKERS
            ]
            logger.info(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(filtered_instruments)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–æ MOEXBMI.")
            return filtered_instruments
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")
        raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")


async def open_position(client, user_state, figi, size, signal):
    direction = OrderDirection.ORDER_DIRECTION_BUY if signal == "BUY" else OrderDirection.ORDER_DIRECTION_SELL
    order = await client.orders.post_order(
        figi=figi,
        quantity=size,
        direction=direction,
        order_type=OrderType.ORDER_TYPE_MARKET,
        account_id=user_state.account_id
    )
    logger.info(f"‚úÖ –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {signal} {size} –ª–æ—Ç–æ–≤ –ø–æ {figi}, OrderID: {order.order_id}")
    await bot.send_message(user_state.chat_id, f"‚úÖ –û—Ä–¥–µ—Ä {signal} —Ä–∞–∑–º–µ—â—ë–Ω: {figi} ({size} –ª–æ—Ç–æ–≤)")
    user_state.position = SimpleNamespace(size=size, figi=figi, entry_price=0)


# async def trading_loop(message):
#     """
#     –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª.
#     """
#     user_id = message.from_user.id
#     user_state = user_states.get(user_id)

#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     if not user_state:
#         logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ user_states.")
#         return

#     # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
#     if not hasattr(user_state, "logger"):
#         user_state.logger = logging.getLogger(f"UserState_{user_id}")
#         user_state.logger.setLevel(logging.INFO)

#     user_state.logger.info("üîÑ –¶–∏–∫–ª —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞—á–∞–ª—Å—è")

#     while user_state.active:
#         try:
#             # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
#             instruments = await get_market_instruments(user_state)
#             if not instruments:
#                 user_state.logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏.")
#                 await asyncio.sleep(60)  # –ñ–¥—ë–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
#                 continue

#             # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
#             for instrument in instruments:
#                 figi = instrument["figi"]
#                 ticker = instrument["ticker"]
#                 lot = instrument["lot"]

#                 user_state.logger.info(f"üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–∞: {ticker} ({figi})")

#                 # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
#                 from_date = datetime.utcnow() - timedelta(days=30)
#                 to_date = datetime.utcnow()
#                 interval = "1hour"

#                 candles = await get_candles(user_state.client, figi, from_date, to_date, interval)

#                 if not isinstance(candles, list) or not candles or len(candles) < 10:
#                     user_state.logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ {ticker}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
#                     continue


#                 # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
#                 signal = enhanced_strategy(candles)
#                 last_price = candles[-1]["close"]

#                 # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
#                 if user_state.position and user_state.entry_price:
#                     change = (last_price - user_state.entry_price) / user_state.entry_price
#                     user_state.logger.info(f"üìà –¢–µ–∫—É—â–∞—è –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫: {change:.2%}")

#                     # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é, –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã —É—Å–ª–æ–≤–∏—è
#                     if change >= 0.05:  # –ü—Ä–∏–º–µ—Ä: —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø—Ä–∏–±—ã–ª—å –ø—Ä–∏ —Ä–æ—Å—Ç–µ –Ω–∞ 5%
#                         await close_position(user_state.client, user_state, figi, "PROFIT")
#                         user_state.logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –ø–æ {ticker} –∑–∞–∫—Ä—ã—Ç–∞ —Å –ø—Ä–∏–±—ã–ª—å—é.")
#                         continue
#                     elif change <= -0.02:  # –ü—Ä–∏–º–µ—Ä: —Ñ–∏–∫—Å–∏—Ä—É–µ–º —É–±—ã—Ç–æ–∫ –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ –Ω–∞ 2%
#                         await close_position(user_state.client, user_state, figi, "LOSS")
#                         user_state.logger.info(f"‚ùå –ü–æ–∑–∏—Ü–∏—è –ø–æ {ticker} –∑–∞–∫—Ä—ã—Ç–∞ —Å —É–±—ã—Ç–∫–æ–º.")
#                         continue

#                 # –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
#                 if signal == "buy" and not user_state.position:
#                     await open_position(user_state.client, user_state, figi, lot, "BUY")
#                     user_state.logger.info(f"üì• –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è 'buy' –ø–æ {ticker}.")

#                 elif signal == "sell" and not user_state.position:
#                     await open_position(user_state.client, user_state, figi, lot, "SELL")
#                     user_state.logger.info(f"üì• –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è 'sell' –ø–æ {ticker}.")

#             # –ñ–¥—ë–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º
#             await asyncio.sleep(60)

#         except Exception as e:
#             user_state.logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}")
#             await asyncio.sleep(60)  # –ñ–¥—ë–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π


# –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
async def close_position(client, user_state, figi: str, reason: str):
    if not user_state.position:
        logger.warning("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è.")
        return
    direction = "SELL" if user_state.position.size > 0 else "BUY"
    quantity = abs(user_state.position.size)
    if await place_order(client, figi, direction, quantity, user_state):
        price = await get_last_price(client, figi)
        log_trade("CLOSE", user_state.ticker, direction, price, quantity, reason)
        await send_notification(user_state.chat_id, f"–ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞: {direction} {quantity} –ª–æ—Ç–æ–≤ –ø–æ {price:.2f}", "INFO")
        user_state.position = None
        update_portfolio_state(user_state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ‚Äì –≤—ã–≤–æ–¥ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    keyboard = get_main_keyboard()
    await message.answer("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /autotrade ‚Äì –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏
@dp.message_handler(commands=["autotrade"])
async def autotrade_handler(message: types.Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ user_states, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º
    if not get_user_state(user_id):
        user_state = UserState()
        user_state.chat_id = message.chat.id
        set_user_state(user_id, user_state)

    user_state = get_user_state(user_id)


    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Tinkoff API
    if not user_state.client:
        user_state.client = await AsyncClient(TINKOFF_TOKEN).__aenter__()

    user_state.active = True
    asyncio.create_task(trading_loop(user_state))
    await message.answer("üöÄ –ê–≤—Ç–æ-—Ç—Ä–µ–π–¥–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance ‚Äì –≤—ã–≤–æ–¥ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
@dp.message_handler(commands=["balance"])
async def balance_cmd(message: types.Message):
    async with AsyncClient(TINKOFF_TOKEN) as client:
        balance = await get_balance(client)
        await send_notification(message.chat.id, f"–ë–∞–ª–∞–Ω—Å: {balance:.2f}‚ÇΩ", "INFO")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop_auto ‚Äì –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏
@dp.message_handler(commands=["stop_auto"])
async def stop_auto_handler(message: types.Message):
    global USER_STATE, AUTO_TRADE_TASK

    if USER_STATE:
        USER_STATE.active = False

    if AUTO_TRADE_TASK and not AUTO_TRADE_TASK.done():
        AUTO_TRADE_TASK.cancel()
        await message.answer("‚õîÔ∏è –ê–≤—Ç–æ-—Ç—Ä–µ–π–¥–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞).")
    else:
        await message.answer("‚ÑπÔ∏è –ê–≤—Ç–æ-—Ç—Ä–µ–π–¥–∏–Ω–≥ –Ω–µ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /report ‚Äì –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç
@dp.message_handler(commands=["report"])
async def report_handler(message: types.Message):
    global USER_STATE
    if USER_STATE is None:
        await message.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ.")
        return
    report = generate_report(message.from_user.id)
    await message.answer(f"–û—Ç—á—ë—Ç –∑–∞ –¥–µ–Ω—å:\n–ü—Ä–∏–±—ã–ª—å: {report['day']:.2f}\n–û—Ç—á—ë—Ç –∑–∞ –Ω–µ–¥–µ–ª—é:\n–ü—Ä–∏–±—ã–ª—å: {report['week']:.2f}\n–û—Ç—á—ë—Ç –∑–∞ –º–µ—Å—è—Ü:\n–ü—Ä–∏–±—ã–ª—å: {report['month']:.2f}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /full_report ‚Äì –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç
@dp.message_handler(commands=["full_report"])
async def full_report_handler(message: types.Message):
    global USER_STATE
    if USER_STATE is None:
        await message.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ.")
        return
    report = generate_report(message.from_user.id)
    await message.answer(f"–ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç:\n–î–Ω–µ–≤–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {report['day']:.2f}\n–ù–µ–¥–µ–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {report['week']:.2f}\n–ú–µ—Å—è—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {report['month']:.2f}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings ‚Äì –≤—ã–≤–æ–¥ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
@dp.message_handler(commands=["settings"])
async def settings_handler(message: types.Message):
    settings_text = f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:\n–†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: {CONFIG['risk_per_trade']*100:.1f}%\n–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —É–±—ã—Ç–∫–∞: {CONFIG['daily_loss_limit']*100:.1f}%\n–ü–µ—Ä–∏–æ–¥ ATR: {CONFIG['atr_period']}\n–ü–ª–µ—á–æ: {CONFIG['leverage']}\n–ö–æ–º–∏—Å—Å–∏–∏: {CONFIG['commission']}"
    await message.answer(settings_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help ‚Äì –≤—ã–≤–æ–¥ —Å–ø—Ä–∞–≤–∫–∏
@dp.message_handler(commands=["help"])
async def help_handler(message: types.Message):
    help_text = ("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                 "/start ‚Äì –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
                 "/autotrade ‚Äì –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ-—Ç—Ä–µ–π–¥–∏–Ω–≥\n"
                 "/balance ‚Äì –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å\n"
                 "/stop_auto ‚Äì –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ-—Ç—Ä–µ–π–¥–∏–Ω–≥\n"
                 "/report ‚Äì –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç –ø–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏\n"
                 "/full_report ‚Äì –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç\n"
                 "/settings ‚Äì –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫\n"
                 "/help ‚Äì –°–ø—Ä–∞–≤–∫–∞\n"
                 "/stop_all ‚Äì –ü–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞\n"
                 "/close_all_positions ‚Äì –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏")
    await message.answer(help_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop_all ‚Äì –ø–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
@dp.message_handler(commands=["stop_all"])
async def stop_all_handler(message: types.Message):
    global USER_STATE
    if USER_STATE:
        USER_STATE.active = False
        await message.answer("–ü–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /close_all_positions ‚Äì –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
@dp.message_handler(commands=["close_all_positions"])
async def close_all_positions_handler(message: types.Message):
    global USER_STATE
    if USER_STATE and USER_STATE.position:
        await close_position(USER_STATE.client, USER_STATE, USER_STATE.figi, "MANUAL_CLOSE_ALL")
        await message.answer("–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã.")
    else:
        await message.answer("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π.")

def is_moscow_trading_hours() -> bool:
    moscow_time = datetime.now(timezone(timedelta(hours=3)))
    start_hour, start_minute = map(int, CONFIG["trading_hours"]["start"].split(":"))
    end_hour, end_minute = map(int, CONFIG["trading_hours"]["end"].split(":"))
    start_time = moscow_time.replace(hour=start_hour, minute=start_minute, second=0, microsecond=0)
    end_time = moscow_time.replace(hour=end_hour, minute=end_minute, second=0, microsecond=0)
    return start_time <= moscow_time <= end_time

async def send_notification(chat_id: int, message: str, level: str = "INFO"):
    icons = {"INFO": "‚ÑπÔ∏è", "WARNING": "‚ö†Ô∏è", "ALERT": "üö®", "SUCCESS": "‚úÖ", "ERROR": "‚ùå"}
    try:
        await asyncio.sleep(0.5)
        await bot.send_message(chat_id, f"{icons.get(level, '')} {message}")
    except exceptions.TelegramRetryAfter as e:
        logger.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –û–∂–∏–¥–∞–Ω–∏–µ {e.retry_after} —Å–µ–∫...")
        await asyncio.sleep(e.retry_after)
        await bot.send_message(chat_id, f"{icons.get(level, '')} {message}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

def is_orderbook_active(client, figi: str, min_total_volume: float = 1000) -> asyncio.Future:
    async def check():
        orderbook = await get_orderbook(client, figi)
        if not orderbook:
            return False
        bid_volume = sum(bid.quantity for bid in orderbook.bids) if orderbook.bids else 0
        ask_volume = sum(ask.quantity for bid in orderbook.asks) if orderbook.asks else 0
        total_volume = bid_volume + ask_volume
        return total_volume >= min_total_volume
    return asyncio.create_task(check())

async def place_order(client, figi: str, direction: str, quantity: int, user_state) -> bool:
    try:
        current_price = await get_last_price(client, figi)
        if current_price is None or current_price <= 0:
            logger.error("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
            return False
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –æ–±—ë—Ä—Ç–∫—É
        balance = await get_balance(client)
        user_state.balance = balance
        order_value = current_price * quantity
        if order_value > balance:
            logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ—Ä–¥–µ—Ä–∞: {order_value} > {balance}")
            return False

        instrument = await client.market_data.get_instrument_by(figi=figi)
        if instrument.trading_status != "NORMAL_TRADING":
            logger.error(f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {figi} –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
            return False

        order_direction = OrderDirection.ORDER_DIRECTION_BUY if direction.upper() == "BUY" else OrderDirection.ORDER_DIRECTION_SELL
        price_value = MoneyValue(units=int(current_price), nano=int(round((current_price - int(current_price)) * 1e9)))
        response = await client.orders.post_order(
            figi=figi,
            quantity=quantity,
            account_id=ACCOUNT_ID,
            direction=order_direction,
            order_type=OrderType.ORDER_TYPE_LIMIT if CONFIG["limit_order"]["enabled"] else OrderType.ORDER_TYPE_MARKET,
            price=price_value
        )
        net_value, commission = apply_commission(current_price, quantity, user_state.instrument_info.get("category", "stocks"), CONFIG["commission"])
        logger.info(f"–õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä {direction} {quantity} –ø–æ FIGI {figi} —Ä–∞–∑–º–µ—â—ë–Ω, –¶–µ–Ω–∞: {current_price:.2f}, –ö–æ–º–∏—Å—Å–∏—è: {commission:.2f}, Net: {net_value:.2f}. –û—Ç–≤–µ—Ç: {response}")
        logger.info(f"üìä –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {figi}: {direction} {quantity} –ª–æ—Ç–æ–≤ –ø–æ —Ü–µ–Ω–µ {current_price}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {e}")
        return False

async def manage_pyramiding(client, user_state, figi: str):
    try:
        current_price = await get_last_price(client, figi)
        if user_state.position:
            if user_state.position.size > 0 and current_price >= user_state.position.entry_price * 1.005:
                additional_size = await calculate_position_size(client, user_state, figi)
                if additional_size >= user_state.instrument_info.get('min_lot', 1):
                    if await place_order(client, figi, "BUY", additional_size, user_state):
                        logger.info(f"–ü–∏—Ä–∞–º–∏–¥–∞: –¥–æ–±–∞–≤–ª–µ–Ω–æ {additional_size} –ª–æ—Ç–æ–≤ –Ω–∞ {figi} –ø–æ —Ü–µ–Ω–µ {current_price}")
            elif user_state.position.size < 0 and current_price <= user_state.position.entry_price * 0.995:
                additional_size = await calculate_position_size(client, user_state, figi)
                if additional_size >= user_state.instrument_info.get('min_lot', 1):
                    if await place_order(client, figi, "SELL", additional_size, user_state):
                        logger.info(f"–ü–∏—Ä–∞–º–∏–¥–∞: –¥–æ–±–∞–≤–ª–µ–Ω–æ {additional_size} –ª–æ—Ç–æ–≤ –Ω–∞ {figi} –ø–æ —Ü–µ–Ω–µ {current_price}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∏—Ä–∞–º–∏–¥–∞–º–∏: {e}")

def log_trade(action: str, ticker: str, direction: str, price: float, quantity: int, reason: str):
    log_file = "trades_history.csv"
    try:
        with open(log_file, "a", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow([datetime.now().isoformat(), action, ticker, direction, price, quantity, reason])
        logger.info(f"–¢–æ—Ä–≥–æ–≤–∞—è —Å–¥–µ–ª–∫–∞: {action} {direction} {quantity} –Ω–∞ {ticker} –ø–æ {price:.2f} - {reason}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–¥–µ–ª–∫–∏: {e}")

def update_portfolio_state(user_state):
    portfolio = {}
    if user_state.position:
        portfolio["position"] = {
            "ticker": user_state.ticker,
            "entry_price": user_state.position.entry_price,
            "stop_loss": user_state.position.stop_loss,
            "take_profit": user_state.position.take_profit,
            "size": user_state.position.size,
            "steps": user_state.position.steps,
            "open_time": user_state.position.open_time.isoformat() if user_state.position.open_time else None,
            "last_profit_take_time": user_state.position.last_profit_take_time.isoformat() if user_state.position.last_profit_take_time else None,
            "timestamp": datetime.now().isoformat()
        }
    else:
        portfolio["position"] = None
    save_portfolio(user_state.user_id, portfolio)

def load_portfolio_state(user_state):
    data = load_portfolio(user_state.user_id)
    if data:
        user_state.portfolio_data = data
    else:
        user_state.portfolio_data = {}

# –ù–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:

def switch_strategy(client, figi: str, raw_candles: list):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é.
    """
    market_condition = get_market_condition(client, figi, raw_candles)
    logger.info(f"–†—ã–Ω–æ—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {market_condition}")
    if market_condition == "TREND":
        return "trend_strategy"
    elif market_condition == "VOLATILITY":
        return "volatility_strategy"
    else:
        return "flat_strategy"

async def reverse_position(client, user_state, figi: str):
    """
    –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç—Ä–µ–Ω–¥–∞.
    """
    if user_state.position:
        current_direction = "BUY" if user_state.position.size > 0 else "SELL"
        new_direction = "SELL" if current_direction == "BUY" else "BUY"
        new_size = await calculate_position_size(client, user_state, figi)
        logger.info(f"–ü–µ—Ä–µ–≤–æ—Ä–æ—Ç –ø–æ–∑–∏—Ü–∏–∏: {current_direction} ‚Üí {new_direction}, —Ä–∞–∑–º–µ—Ä: {new_size}")
        success = await place_order(client, figi, new_direction, new_size, user_state)
        if success:
            await send_notification(user_state.chat_id, f"–ü–æ–∑–∏—Ü–∏—è –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–∞: {new_direction} {new_size} –ª–æ—Ç–æ–≤")
    else:
        logger.info("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞.")

def daily_loss_limit(user_state):
    start_balance = user_state.start_of_day_balance
    current_balance = user_state.balance
    if start_balance <= 0:
        logger.warning("–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω 0, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ —É–±—ã—Ç–∫–∞.")
        return False
    loss_pct = (start_balance - current_balance) / start_balance
    if loss_pct >= CONFIG["daily_loss_limit"]:
        logger.warning(f"–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —É–±—ã—Ç–∫–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: {loss_pct*100:.1f}%")
        return True
    return False

async def partial_take_profit(client, user_state, figi: str):
    """
    –§–∏–∫—Å–∏—Ä—É–µ—Ç –ø—Ä–∏–±—ã–ª—å —á–∞—Å—Ç—è–º–∏: –∑–∞–∫—Ä—ã–≤–∞–µ—Ç 50% –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ +0.5%
    –∏ –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 1-1.5% –ø—Ä–∏–±—ã–ª–∏.
    """
    if not hasattr(user_state.position, "partial_taken"):
        user_state.position.partial_taken = False

    if not hasattr(user_state, "position") or user_state.position is None:
        return
    current_price = await get_last_price(client, figi)
    entry_price = user_state.position.entry_price
    if user_state.position.size > 0:
        profit_pct = (current_price - entry_price) / entry_price
    else:
        profit_pct = (entry_price - current_price) / entry_price

    if profit_pct >= 0.005 and not getattr(user_state.position, "partial_taken", False):
        partial_size = int(user_state.position.size * CONFIG["profit_take"]["partial_close_ratio"])
        if partial_size > 0:
            logger.info(f"–§–∏–∫—Å–∏—Ä—É–µ–º —á–∞—Å—Ç–∏—á–Ω—É—é –ø—Ä–∏–±—ã–ª—å: –∑–∞–∫—Ä—ã–≤–∞–µ–º {partial_size} –ª–æ—Ç–æ–≤ –ø–æ FIGI {figi}")
            await place_order(client, figi, "SELL" if user_state.position.size > 0 else "BUY", partial_size, user_state)
            user_state.position.partial_taken = True
    elif profit_pct >= 0.01:
        logger.info("–§–∏–∫—Å–∏—Ä—É–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –ø—Ä–∏–±—ã–ª–∏ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 1-1.5%")
        await place_order(client, figi, "SELL" if user_state.position.size > 0 else "BUY", abs(user_state.position.size), user_state)

async def adjust_strategy(client, user_state, figi: str):
    recommendation = analyze_trading_history()
    await send_notification(user_state.chat_id, f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {recommendation}")

async def use_limit_orders(client, user_state, figi: str):
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç –ª–∏–º–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤—Ö–æ–¥–∞.
    """
    CONFIG["limit_order"]["enabled"] = True
    logger.info("–õ–∏–º–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –≤–∫–ª—é—á–µ–Ω—ã.")

async def trade_high_risk_stocks(client, user_state, market_data):
    """
    –¢–æ—Ä–≥–æ–≤–ª—è –≤—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–º–∏ –∞–∫—Ü–∏—è–º–∏ (2-3 —ç—à–µ–ª–æ–Ω–∞) —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Ä–∏—Å–∫–∞.
    """
    potential_assets = find_high_potential_assets(market_data)
    for ticker in potential_assets:
        logger.info(f"–¢–æ—Ä–≥–æ–≤–ª—è –≤—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–º –∞–∫—Ç–∏–≤–æ–º: {ticker}")
        await send_notification(user_state.chat_id, f"–¢–æ—Ä–≥–æ–≤–ª—è –≤—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–º –∞–∫—Ç–∏–≤–æ–º: {ticker}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –º–µ–Ω—é (–∫–Ω–æ–ø–∫–∏)
@dp.message_handler()
async def menu_handler(message: types.Message):
    if not message.text:
        return
    text = message.text.strip().lower()
    if text in ["–∞–≤—Ç–æ-—Ç—Ä–µ–π–¥–∏–Ω–≥", "–∞–≤—Ç–æ —Ç—Ä–µ–π–¥–∏–Ω–≥"]:
        await autotrade_handler(message)
    elif text == "–±–∞–ª–∞–Ω—Å":
        await balance_cmd(message)
    elif text in ["—Å—Ç–æ–ø –∞–≤—Ç–æ", "—Å—Ç–æ–ø"]:
        await stop_auto_handler(message)
    elif text in ["–æ—Ç—á—ë—Ç", "–æ—Ç—á–µ—Ç"]:
        await report_handler(message)
    elif text == "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏":
        await settings_handler(message)
    elif text == "–ø–æ–º–æ—â—å":
        await help_handler(message)
    elif text in ["–ø–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞", "—Å—Ç–æ–ø_all"]:
        await stop_all_handler(message)
    elif text in ["–∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏", "close all positions"]:
        await close_all_positions_handler(message)
    else:
        await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.")

def is_moscow_trading_hours() -> bool:
    moscow_time = datetime.now(timezone(timedelta(hours=3)))
    start_hour, start_minute = map(int, CONFIG["trading_hours"]["start"].split(":"))
    end_hour, end_minute = map(int, CONFIG["trading_hours"]["end"].split(":"))
    start_time = moscow_time.replace(hour=start_hour, minute=start_minute, second=0, microsecond=0)
    end_time = moscow_time.replace(hour=end_hour, minute=end_minute, second=0, microsecond=0)
    return start_time <= moscow_time <= end_time



if __name__ == "__main__":
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏
        if not os.path.exists("ml_model.pkl"):
            logger.warning("–§–∞–π–ª –º–æ–¥–µ–ª–∏ ml_model.pkl –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        USER_STATE = UserState()
        USER_STATE.active = False
        USER_STATE.balance = 0
        USER_STATE.start_of_day_balance = 0
        USER_STATE.instrument_info = {"lot": 1, "category": "stocks", "min_lot": 1}
        USER_STATE.position = None
        USER_STATE.client = None

        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–≥–µ—Ä
        USER_STATE.logger = logging.getLogger("UserState")
        USER_STATE.logger.setLevel(logging.INFO)

        executor.start_polling(dp, skip_updates=True)

    except KeyboardInterrupt:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

        
# –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ PositionData (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è)
class PositionData:
    def __init__(self):
        self.entry_price = 0.0
        self.stop_loss = 0.0
        self.take_profit = 0.0
        self.size = 0
        self.steps = 0
        self.open_time = None
        self.last_profit_take_time = None

class UserState:
    def __init__(self):
        self.chat_id = None
        self.account_id = None
        self.balance = 0.0
        self.start_of_day_balance = 0.0
        self.position = None
        self.entry_price = None
        self.active = False
        self.instrument_info = {"lot": 1, "category": "stocks", "min_lot": 1}
        self.client = None
        self.logger = logging.getLogger(f"UserState_{id(self)}")
        self.logger.setLevel(logging.INFO)

