import asyncio
import os
import logging
import json
from datetime import datetime, timedelta
import numpy as np
from tinkoff.invest import CandleInterval
from tinkoff.invest.schemas import CandleInterval
from tinkoff.invest.utils import now
from config import CONFIG, ACCOUNT_ID

RETRY_ATTEMPTS = CONFIG["retry_attempts"]
RETRY_INITIAL_DELAY = CONFIG["retry_initial_delay"]
ATR_PERIOD = CONFIG["atr_period"]

logger = logging.getLogger("market_data")

async def get_last_price(client, figi: str) -> float:
    attempts = 0
    delay_time = RETRY_INITIAL_DELAY
    while attempts < RETRY_ATTEMPTS:
        try:
            response = await client.market_data.get_last_prices(figi=[figi])
            if not response.last_prices:
                return 0.0
            price = response.last_prices[0].price
            return price.units + price.nano / 1e9
        except Exception as e:
            attempts += 1
            logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempts} –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è FIGI {figi}: {e}")
            if attempts >= RETRY_ATTEMPTS:
                return 0.0
            await asyncio.sleep(delay_time)
            delay_time *= 2

async def get_orderbook(client, figi: str, depth: int = 10):
    attempts = 0
    delay_time = RETRY_INITIAL_DELAY
    while attempts < RETRY_ATTEMPTS:
        try:
            orderbook = await client.market_data.get_order_book(figi=figi, depth=depth)
            return orderbook
        except Exception as e:
            attempts += 1
            logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempts} –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–∫–∞–Ω–∞ –¥–ª—è FIGI {figi}: {e}")
            if attempts >= RETRY_ATTEMPTS:
                return None
            await asyncio.sleep(delay_time)
            delay_time *= 2

async def get_atr(client, figi: str) -> float:
    attempts = 0
    delay_time = RETRY_INITIAL_DELAY
    while attempts < RETRY_ATTEMPTS:
        try:
            candles = await client.market_data.get_candles(
                figi=figi,
                from_=now() - timedelta(hours=1),
                to=now(),
                interval=CandleInterval.CANDLE_INTERVAL_5_MIN
            )
            if candles and candles.candles:
                return calculate_atr(candles.candles, ATR_PERIOD)
            else:
                return 0.0
        except Exception as e:
            attempts += 1
            logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempts} –ø–æ–ª—É—á–µ–Ω–∏—è ATR –¥–ª—è FIGI {figi}: {e}")
            if attempts >= RETRY_ATTEMPTS:
                return 0.0
            await asyncio.sleep(delay_time)
            delay_time *= 2

def calculate_atr(candles: list, period: int) -> float:
    if len(candles) < 2:
        return 0.0
    true_ranges = []
    for i in range(1, len(candles)):
        high = candles[i].high.units + candles[i].high.nano / 1e9
        low = candles[i].low.units + candles[i].low.nano / 1e9
        prev_close = candles[i-1].close.units + candles[i-1].close.nano / 1e9
        true_range = max(high - low, abs(high - prev_close), abs(low - prev_close))
        true_ranges.append(true_range)
    return np.mean(true_ranges[-period:]) if len(true_ranges) >= period else np.mean(true_ranges)

def money_value_to_float(value) -> float:
    try:
        return value.units + value.nano / 1e9
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è: {e}")
        return 0.0

async def get_balance(client) -> float:
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å withdraw_limits
        response = await client.operations.get_withdraw_limits(account_id=ACCOUNT_ID)
        logger.info(f"–û—Ç–≤–µ—Ç get_withdraw_limits: {response}")
        balance = 0.0
        if hasattr(response, "money") and response.money:
            balance = sum(money_value_to_float(money) for money in response.money)
        
        # –î–∞–ª–µ–µ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å, —á—Ç–æ–±—ã –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –ø–æ –º–∞—Ä–∂–µ
        portfolio = await client.operations.get_portfolio(account_id=ACCOUNT_ID)
        logger.info(f"–û—Ç–≤–µ—Ç get_portfolio: {portfolio}")
        # –ï—Å–ª–∏ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ –µ—Å—Ç—å –ø–æ–ª–µ available_margin, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if hasattr(portfolio, "available_margin"):
            margin = money_value_to_float(portfolio.available_margin)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—é —Å—É–º–º—É: —Å—Ä–µ–¥—Å—Ç–≤–∞ + –º–∞—Ä–∂–∞
            return balance + margin
        elif hasattr(portfolio, "money") and portfolio.money:
            portfolio_balance = sum(money_value_to_float(money) for money in portfolio.money)
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è –±–æ–ª—å—à–µ, —á–µ–º –∏–∑ withdraw_limits, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
            return max(balance, portfolio_balance)
        else:
            return balance
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        return 0.0

# –ù–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:

async def get_market_makers(client, figi: str):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–∫–∞–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞—Ö (market makers).
    """
    orderbook = await client.market_data.get_order_book(figi=figi, depth=20)
    if orderbook is None:
        return {}
    bid_sizes = sum(bid.quantity for bid in orderbook.bids) if orderbook.bids else 0
    ask_sizes = sum(ask.quantity for ask in orderbook.asks) if orderbook.asks else 0
    makers = {"bid_total": bid_sizes, "ask_total": ask_sizes}
    logger.info(f"–î–∞–Ω–Ω—ã–µ market makers –¥–ª—è FIGI {figi}: {makers}")
    return makers

def find_high_potential_assets(market_data: dict) -> list:
    """
    –ò—â–µ—Ç —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∞–∫—Ü–∏–∏ –≤—Ç–æ—Ä–æ–≥–æ —ç—à–µ–ª–æ–Ω–∞ —Å –∞–Ω–æ–º–∞–ª—å–Ω—ã–º–∏ –¥–≤–∏–∂–µ–Ω–∏—è–º–∏.
    market_data: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –∞–∫—Ç–∏–≤–∞–º.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º.
    """
    potential = []
    for ticker, data in market_data.items():
        # –ü—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –¥–µ–Ω—å –±–æ–ª–µ–µ 5% –∏ –æ–±—ä–µ–º –±–æ–ª—å—à–µ –ø–æ—Ä–æ–≥–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        if abs(data.get("daily_change", 0)) > 0.05 and data.get("volume", 0) > CONFIG["min_avg_volume"]:
            potential.append(ticker)
    logger.info(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤—ã—Å–æ–∫–æ–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤—ã: {potential}")
    return potential

async def get_trade_candidates(client, top_n=None):
    instruments = await client.instruments.shares()
    candidates = []

    logger.info("üîç –í—ã–∑–æ–≤ get_trade_candidates –Ω–∞—á–∞—Ç")

    for instrument in instruments.instruments:
        if not instrument.api_trade_available_flag:
            continue
        if not instrument.for_qual_investor_flag:
            candidates.append({
                "figi": instrument.figi,
                "ticker": instrument.ticker,
                "lot": instrument.lot,
                "min_price_increment": instrument.min_price_increment.units + instrument.min_price_increment.nano / 1e9
            })

    logger.info(f"üì¶ –û—Ç–æ–±—Ä–∞–Ω–æ {len(candidates)} –∞–∫—Ü–∏–π")
    return candidates

async def save_candles_to_file(figi: str, filename: str, interval='1hour', years=2, client=None):
    if not client:
        raise ValueError("–ö–ª–∏–µ–Ω—Ç Tinkoff API –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ —Ñ—É–Ω–∫—Ü–∏—é save_candles_to_file.")

    to_date = datetime.now()
    from_date = to_date - timedelta(days=365 * years)

    candles = await get_candles(figi, from_date=from_date, to_date=to_date, interval=interval, client=client)
    if not candles:
        logger.warning(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ {figi}")
        return

    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(candles, f, ensure_ascii=False, indent=2)
    logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ {len(candles)} —Å–≤–µ—á–µ–π –ø–æ {figi} –≤ —Ñ–∞–π–ª {filename}")

async def get_candles(client, figi, from_date=None, to_date=None, interval='5min'):
    try:
        now = datetime.utcnow()
        if not to_date:
            to_date = now
        if not from_date:
            from_date = now - timedelta(days=5)

        # –ü–æ–¥–±–æ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        interval_mapping = {
            '1min': CandleInterval.CANDLE_INTERVAL_1_MIN,
            '5min': CandleInterval.CANDLE_INTERVAL_5_MIN,
            '15min': CandleInterval.CANDLE_INTERVAL_15_MIN,
            'hour': CandleInterval.CANDLE_INTERVAL_HOUR,
            '1hour': CandleInterval.CANDLE_INTERVAL_HOUR,
            'day': CandleInterval.CANDLE_INTERVAL_DAY
        }
        interval_enum = interval_mapping.get(interval, CandleInterval.CANDLE_INTERVAL_5_MIN)

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–≤–µ—á–∏
        candles_response = await client.market_data.get_candles(
            figi=figi,
            from_=from_date,
            to=to_date,
            interval=interval_enum
        )

        if not candles_response.candles:
            raise ValueError(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–≤–µ—á–∞–º –¥–ª—è {figi}")

        formatted_candles = []

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–Ω
        def parse_price(price):
            try:
                if hasattr(price, 'units') and hasattr(price, 'nano'):
                    return price.units + price.nano / 1e9
                elif isinstance(price, (int, float)):
                    return float(price)
                else:
                    return 0.0
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–Ω—ã: {e}")
                return 0.0

        for candle in candles_response.candles:
            formatted_candles.append({
                "time": candle.time.isoformat(),
                "open": parse_price(candle.open),
                "high": parse_price(candle.high),
                "low": parse_price(candle.low),
                "close": parse_price(candle.close),
                "volume": candle.volume
            })

        return formatted_candles

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π –ø–æ {figi}: {e}")
        return []


def filter_candles(candles):
    """
    –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–≤–µ—á–µ–π:
    - –£–±–∏—Ä–∞–µ–º —Å–≤–µ—á–∏ —Å –Ω—É–ª–µ–≤—ã–º–∏ –æ–±—ä–µ–º–∞–º–∏.
    - –£–±–∏—Ä–∞–µ–º —Å–≤–µ—á–∏ —Å –ø—É—Å—Ç—ã–º–∏ –∏–ª–∏ –Ω—É–ª–µ–≤—ã–º–∏ —Ü–µ–Ω–∞–º–∏ –∑–∞–∫—Ä—ã—Ç–∏—è.
    """
    filtered = []
    volumes = []

    for candle in candles:
        if (
            candle["close"] is not None
            and candle["volume"] is not None
            and candle["close"] > 0
            and candle["volume"] > 0
        ):
            filtered.append(candle)
            volumes.append(candle["volume"])

    return filtered, volumes


async def save_or_update_candles(figi: str, filename: str, interval='1hour', years=2, client=None):
    if not client:
        raise ValueError("–ö–ª–∏–µ–Ω—Ç Tinkoff API –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ —Ñ—É–Ω–∫—Ü–∏—é save_or_update_candles.")

    to_date = datetime.now()
    from_date = to_date - timedelta(days=365 * years)

    existing_candles = []
    if os.path.exists(filename):
        with open(filename, 'r', encoding='utf-8') as f:
            existing_candles = json.load(f)
            if existing_candles:
                last_time = datetime.fromisoformat(existing_candles[-1]['time'])
                from_date = last_time + timedelta(hours=1)

    new_candles = await get_candles(figi, from_date=from_date, to_date=to_date, interval=interval, client=client)
    if not new_candles:
        logger.warning(f"‚õî –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–≤–µ—á–µ–π –ø–æ {figi}")
        return

    all_candles = existing_candles + new_candles
    all_candles = {c['time']: c for c in all_candles}  # remove duplicates
    sorted_candles = sorted(all_candles.values(), key=lambda x: x['time'])

    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(sorted_candles, f, ensure_ascii=False, indent=2)

    logger.info(f"üìä –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ {len(new_candles)} –Ω–æ–≤—ã—Ö —Å–≤–µ—á–µ–π –ø–æ {figi}")

async def get_market_instruments(client):
    instruments = await client.instruments.shares()
    shares = instruments.instruments
    filtered = []

    for share in shares:
        # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∞–∫—Ü–∏–∏ –≤ —Ä–µ–∂–∏–º–µ TQBR (–æ—Å–Ω–æ–≤–Ω–æ–π —Ä—ã–Ω–æ–∫)
        if share.currency == "rub" and share.exchange in ("MOEX", "SPBEX"):
            filtered.append({
                "figi": share.figi,
                "ticker": share.ticker,
                "class_code": share.class_code,
                "name": share.name
            })

    return filtered


